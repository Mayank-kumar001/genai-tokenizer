
// export const obj = {
//     "!" : 1,
//     "@" : 2,
//     "#" : 3,
//     "$" : 4,
//     "%" : 5,
//     "^" : 6,
//     "&" : 7,
//     "(" : 8,
//     ")" : 9,
//     "{" : 10,
//     "}" : 11,
//     "[" : 12,
//     "]" : 13,
//     "`" : 14,
//     "~" : 15,
//     "|" : 16,
//     ";" : 17,
//     ":" : 18,
//     "'" : 19,
//     '"' : 20,
//     "?" : 21,
//     "/" : 22,
//     "+" : 23,
//     "-" : 24,
//     "*" : 25,
//     "=" : 26,
//     "_" : 27,
//     "1" : 28,
//     "2" : 29,
//     "3" : 30,
//     "4" : 31,
//     "5" : 32,
//     "6" : 33,
//     "7" : 34,
//     "8" : 35,
//     "9" : 36,
//     "0" : 37,
//     "a" : 38,
//     "b" : 39,
//     "c" : 40,
//     "d" : 41,
//     "e" : 42,
//     "f" : 43,
//     "g" : 44,
//     "h" : 45,
//     "i" : 46,
//     "j" : 47,
//     "k" : 48,
//     "l" : 49,
//     "m" : 50,
//     "n" : 51,
//     "o" : 52,
//     "p" : 53,
//     "q" : 54,
//     "r" : 55,
//     "s" : 56,
//     "t" : 57,
//     "u" : 58,
//     "v" : 59,
//     "w" : 60,
//     "x" : 61,
//     "y" : 62,
//     "z" : 63,
//     "A" : 64,
//     "B" : 65,
//     "C" : 66,
//     "D" : 67,
//     "E" : 68,
//     "F" : 69,
//     "G" : 70,
//     "H" : 71,
//     "I" : 72,
//     "J" : 73,
//     "K" : 74,
//     "L" : 75,
//     "M" : 76,
//     "N" : 77,
//     "O" : 78,
//     "P" : 79,
//     "Q" : 80,
//     "R" : 81,
//     "S" : 82,
//     "T" : 83,
//     "U" : 84,
//     "V" : 85,
//     "W" : 86,
//     "X" : 87,
//     "Y" : 88,
//     "Z" : 89,
//     "<" : 90,
//     ">" : 91,
//     "," : 92,
//     "." : 93,
//     "\\" : 94,
//     "\n" : 95, 
//     "\t" : 96, 
//     " " : 97,  
//     "§" : 98,
//     "¢" : 99,
//     "€" : 100
// };

export const obj = {"0":37,"1":28,"2":29,"3":30,"4":31,"5":32,"6":33,"7":34,"8":35,"9":36,"365":185,"2022":1392,"!":672,"@":2,"#":3,"$":4,"%":558,"^":6,"&":7,"(":8,")":9,"{":10,"}":11,"[":12,"]":13,"`":14,"~":15,"|":16,";":17,":":18,"'":19,"\"":20,"?":21,"/":540,"+":538,"-":539,"*":560,"=":26,"_":27,"a":198,"b":39,"c":40,"d":41,"e":42,"f":43,"g":44,"h":45,"i":46,"j":47,"k":48,"l":49,"m":50,"n":1272,"o":52,"p":53,"q":54,"r":55,"s":56,"t":57,"u":58,"v":59,"w":60,"x":340,"y":359,"z":596,"A":672,"B":65,"C":66,"D":67,"E":68,"F":69,"G":70,"H":71,"I":466,"J":73,"K":74,"L":75,"M":76,"N":77,"O":78,"P":79,"Q":80,"R":81,"S":82,"T":83,"U":84,"V":85,"W":86,"X":87,"Y":88,"Z":89,"<":733,">":731,",":92,".":93,"\\":94,"\n":95,"\t":96," ":97,"§":98,"¢":99,"€":100,"Python":101,"is":102,"one":103,"of":104,"the":105,"most":106,"widely":107,"used":108,"programming":109,"languages":110,"among":111,"data":112,"scientists.":113,"This":114,"course":115,"will":116,"show":117,"you":118,"technical":119,"advantages":120,"it":121,"has":122,"over":123,"other":124,"languages.":125,"You":126,"start":127,"working":128,"its":129,"modules":130,"for":131,"scientific":132,"computing,":133,"and":134,"begin":135,"to":136,"understand":137,"why":138,"these":139,"functionalities":140,"make":141,"preferred":142,"choice":143,"in":144,"finance,":145,"econometrics,":146,"economics,":147,"science,":148,"machine":149,"learning.":150,"learn":151,"about":152,"Python’s":153,"advantages,":154,"specific":155,"features,":156,"modules,":157,"functionalities,":158,"more:":159,"•":160,"Basic":161,"Syntax":162,"Create":163,"Use":164,"functions":165,"Work":166,"variables,":167,"operators,":168,"conditional":169,"statements":170,"Study":171,"sequences":172,"iterations":173,"Import":174,"Keywords:":175,"Python,":176,"statements,":177,"import":178,"python":179,"syntax,":180,"strings,":181,"loops,":182,"while":183,"loops":184,"DATA":185,"SCENCE":186,"1.":187,"Introduction":188,"Programming":189,"The":190,"computer":191,"understands":192,"1s":193,"0s":194,"only.":195,"To":196,"communicate":197,"real-life":198,"problem":199,"computer,":200,"need":201,"create":202,"type":203,"text,":204,"called":205,"source":206,"code":207,"or":208,"human":209,"readable":210,"code,":211,"that":212,"software":213,"can":214,"read":215,"then":216,"process":217,"0s.":218,"Term":219,"Definition":220,"Program":221,"sequence":222,"instructions":223,"designate":224,"how":225,"execute":226,"computation":227,"taking":228,"task":229,"writing":230,"down":231,"language":232,"2.":233,"Why":234,"Python?":235,"an":236,"open-source,":237,"general-purpose":238,"high-level":239,"language.":240,"Open-source":241,"(OSS)":242,"means":243,"free.":244,"large":245,"active":246,"community":247,"access":248,"software’s":249,"contributes":250,"continuous":251,"development":252,"upgrading,":253,"depending":254,"on":255,"users’":256,"needs":257,"General-purpose":258,"There":259,"broad":260,"set":261,"fields":262,"where":263,"could":264,"be":265,"applied":266,"–":267,"web":268,"programming,":269,"analysis":270,"financial":271,"data,":272,"big":273,"more.":274,"High-level":275,"employ":276,"syntax":277,"lot":278,"closer":279,"logic,":280,"which":281,"makes":282,"easier":283,"implement.":284,"popularity":285,"lies":286,"two":287,"main":288,"pillars.":289,"One":290,"easy-to-learn":291,"designed":292,"highly":293,"readable,":294,"quite":295,"clear":296,"intuitive.":297,"And":298,"second":299,"reason":300,"user-friendliness":301,"does":302,"not":303,"take":304,"away":305,"from":306,"strength.":307,"variety":308,"complex":309,"computations":310,"powerful":311,"by":312,"specialists.":313,"3.":314,"Variables":315,"Data":316,"Types":317,"3.1":318,"concepts":319,"variables.":320,"They":321,"are":322,"your":323,"best":324,"friends.":325,"deal":326,"them":327,"all":328,"time.":329,"use":330,"store":331,"information.":332,"represent":333,"input.":334,"Let’s":335,"say":336,"want":337,"have":338,"variable":339,"equal":340,"value":341,"ask":342,"tell":343,"variable.":344,"Type":345,"equals":346,"5.":347,"Write":348,"execute.":349,"here’s":350,"result":351,"An":352,"alternative":353,"way":354,"instruction":355,"provide":356,"we":357,"assigned":358,"would":359,"print":360,"command.":361,"If":362,"“print(y)”,":363,"simply":364,"this":365,"command":366,"as":367,"statement.":368,"3.2":369,"Numbers":370,"Boolean":371,"Values":372,"When":373,"only":374,"if":375,"numeric":376,"value,":377,"being":378,"ambiguous.":379,"numbers":380,"integers":381,"floating":382,"points,":383,"also":384,"floats,":385,"instance.":386,"Integer":387,"Positive":388,"negative":389,"whole":390,"without":391,"decimal":392,"point":393,"Example:":394,"5,":395,"10,":396,"-3,":397,"-15":398,"Floating":399,"(float)":400,"Real":401,"numbers.":402,"Hence,":403,"they":404,"4.75,":405,"-5.50,":406,"11.0":407,"True":408,"False":409,"corresponding":410,"machine’s":411,"logic":412,"understanding":413,"0s,":414,"off,":415,"right":416,"wrong,":417,"true":418,"false.":419,"True,":420,"3.3":421,"Strings":422,"text":423,"composed":424,"characters.":425,"single":426,"double":427,"quotation":428,"marks":429,"around":430,"name":431,"George.":432,"displays":433,"‘George’":434,"don’t":435,"Should":436,"print,":437,"output":438,"shown":439,"no":440,"quotes":441,"you’ll":442,"able":443,"see":444,"plain":445,"text.":446,"“I’m":447,"fine”":448,"apostrophe":449,"English":450,"Pythonic":451,"one.":452,"In":453,"such":454,"situations,":455,"distinguish":456,"between":457,"symbols":458,"put":459,"within":460,"leave":461,"apostrophe,":462,"technically":463,"coincides":464,"quote":465,"M.":466,"do":467,"sides":468,"place":469,"back":470,"slash":471,"before":472,"phrase.":473,"backslash":474,"escape":475,"character,":476,"changes":477,"interpretation":478,"characters":479,"immediately":480,"after":481,"it.":482,"state":483,"“press":484,"“Enter””,":485,"outer":486,"must":487,"differ":488,"inner":489,"ones.":490,"Put":491,"sides.":492,"Say":493,"wish":494,"“Red":495,"car”":496,"same":497,"line.":498,"“Add”":499,"strings":500,"typing":501,"plus":502,"sign":503,"two.":504,"blank":505,"space":506,"first":507,"word.":508,"(In":509,"[17])":510,"“print":511,"‘Red’”,":512,"comma,":513,"trailing":514,"next":515,"word,":516,"‘car’,":517,"line,":518,"separating":519,"words":520,"space.":521,"[18])":522,"4.":523,"4.1":524,"Arithmetic":525,"Operators":526,"equation":527,"here,":528,"operands,":529,"minus":530,"signs":531,"given":532,"arithmetic":533,"operations,":534,"operators.":535,"Operator":536,"Description":537,"Addition":538,"Subtraction":539,"Division":540,"Note:":541,"divide":542,"3,":543,"when":544,"2,":545,"should":546,"look":547,"quotient":548,"float":549,"divided":550,"integer":551,"So,":552,"either":553,"transform":554,"number":555,"into":556,"directly.":557,"Returns":558,"remainder":559,"Multiplication":560,"**":561,"Performs":562,"power":563,"calculation":564,"4.2":565,"Double":566,"Equality":567,"Sign":568,"“assign”":569,"“bind":570,"to”.":571,"For":572,"instance,":573,"“assign":574,"y”;":575,"y”.":576,"From":577,"moment":578,"125.":579,"mean":580,"equality":581,"assignment":582,"sign.":583,"Anytime":584,"it,":585,"obtain":586,"possible":587,"outcomes":588,"“True”":589,"“False”.":590,"4.3":591,"Reassign":592,"assign":593,"z,":594,"executing":595,"After":596,"that,":597,"anymore.":598,"reassigns":599,"objects.":600,"Therefore,":601,"remember":602,"last":603,"valid,":604,"older":605,"commands":606,"overwritten.":607,"4.4":608,"Add":609,"Comments":610,"sentences":611,"executed":612,"computer;":613,"doesn’t":614,"instructions.":615,"trick":616,"hash":617,"beginning":618,"each":619,"line":620,"like":621,"insert":622,"comment.":623,"comment":624,"lines,":625,"forget":626,"4.5":627,"Line":628,"Continuation":629,"might":630,"prefer":631,"send":632,"part":633,"2.0":634,"times":635,"1.5":636,"written":637,"still":638,"achieved":639,"putting":640,"end":641,"be.":642,"It":643,"indicates":644,"continue":645,"new":646,"4.6":647,"Indexing":648,"Elements":649,"Is":650,"extract":651,"letter":652,"“d”?":653,"Yes,":654,"using":655,"square":656,"brackets.":657,"them,":658,"specify":659,"position":660,"extracted.":661,"Make":662,"sure":663,"mistake":664,"brackets":665,"parentheses":666,"braces:":667,"()":668,"[]":669,"braces–":670,"{}":671,"very":672,"important":673,"thing":674,"count":675,"0,":676,"1!":677,"1,":678,"4,":679,"so":680,"on.":681,"That’s":682,"I’ll":683,"4th":684,"letter,":685,"‘d’,":686,"here.":687,"4.7":688,"Structure":689,"Your":690,"Code":691,"Indentation":692,"apply":693,"indentation":694,"practice":695,"important,":696,"ideas":697,"properly.":698,"Def":699,"Print":700,"form":701,"separate":702,"and,":703,"way,":704,"clearly":705,"distinguishable":706,"blocks":707,"commands.":708,"Everything":709,"regards":710,"function":711,"inside.":712,"Once":713,"decide":714,"something":715,"else,":716,"indentation.":717,"more":718,"visible,":719,"clarifies":720,"applying":721,"solve":722,"problem.":723,"4.8":724,"Comparison":725,"==":726,"Verifies":727,"left":728,"side":729,"!=":730,"Greater":731,"than":732,"Less":733,">=":734,"<=":735,"4.9":736,"Logical":737,"Briefly,":738,"logical":739,"operators":740,"“NOT”,":741,"“AND”,":742,"“OR”.":743,"compare":744,"certain":745,"amount":746,"return":747,"“False”":748,"hence":749,"their":750,"name,":751,"Leads":752,"opposite":753,"statement":754,"“not":755,"True”":756,"leads":757,"Checks":758,"whether":759,"“True":760,"False”":761,"least":762,"“False":763,"respect":764,"order":765,"importance":766,"three":767,"is:":768,"“not”":769,"comes":770,"first,":771,"“and”,":772,"finally":773,"“or”.":774,"4.10":775,"Identity":776,"identity":777,"“is”":778,"“is":779,"not”.":780,"similar":781,"exclamation":782,"mark":783,"saw":784,"earlier.":785,"Conditional":786,"Statements":787,"5.1":788,"IF":789,"prominent":790,"example":791,"“IF”":792,"What":793,"intuitive,":794,"but":795,"syntax.":796,"graph":797,"help":798,"imagine":799,"conditionals.":800,"Before":801,"outcome":802,"operation,":803,"follows":804,"steps.":805,"because":806,"if-condition":807,"true,":808,"program":809,"directly":810,"lead":811,"or,":812,"case,":813,"nothing.":814,"any":815,"go":816,"black":817,"progress":818,"there":819,"5.2":820,"ELSE":821,"“ELSE”":822,"successive":823,"cases.":824,"Instead":825,"leading":826,"output,":827,"condition":828,"false,":829,"get":830,"else":831,"code.":832,"Regardless":833,"initial":834,"satisfied,":835,"point,":836,"concluded":837,"entire":838,"operation":839,"ready":840,"5.3":841,"Else":842,"if,":843,"Brief":844,"ELIF":845,"greater":846,"think:":847,"“else":848,"less":849,"5”,":850,"“elif":851,"out":852,"“Less”.":853,"Know":854,"add":855,"many":856,"elif":857,"need.":858,"detail":859,"try":860,"always":861,"reads":862,"top":863,"bottom.":864,"speed":865,"works,":866,"executes":867,"Scientifically":868,"speaking,":869,"give":870,"control":871,"flow.":872,"flow":873,"thought":874,"thinks":875,"step":876,"step,":877,"steps":878,"rigid":879,"order.":880,"works":881,"statement,":882,"computer’s":883,"once":884,"been":885,"satisfied.":886,"if-":887,"top,":888,"through":889,"elif-statements":890,"middle,":891,"else-":892,"end.":893,"finds":894,"satisfied":895,"condition,":896,"respective":897,"conditional.":898,"5.4":899,"Note":900,"perspective,":901,"everything":902,"system":903,"Boolean,":904,"comprising":905,"1s,":906,"“True”.":907,"paying":908,"attention":909,"value.":910,"helps":911,"us":912,"general":913,"computational":914,"conditionals":915,"work":916,"Python.":917,"Basically,":918,"if-statement,":919,"attach":920,"Depending":921,"outcome,":922,"“False”,":923,"produce":924,"suggested":925,"outputs,":926,"“Correct”":927,"“Incorrect”.":928,"6.":929,"Functions":930,"6.1":931,"Defining":932,"Function":933,"invaluable":934,"tool":935,"programmers.":936,"function,":937,"just":938,"write":939,"def":940,"neither":941,"nor":942,"function.":943,"keyword.":944,"indicate":945,"this,":946,"Jupyter":947,"automatically":948,"change":949,"font":950,"color":951,"green.":952,"Then,":953,"use.":954,"Then":955,"pair":956,"parentheses.":957,"Technically,":958,"parentheses,":959,"parameters":960,"requires":961,"any.":962,"zero":963,"parameters.":964,"proceed,":965,"miss":966,"colon":967,"Since":968,"inconvenient":969,"becomes":970,"longer,":971,"much":972,"better":973,"build":974,"habit":975,"laying":976,"indent":977,"again.":978,"Good":979,"legibility":980,"counts":981,"good":982,"style":983,"coding!":984,"6.2":985,"Creating":986,"Parameter":987,"Don’t":988,"We":989,"plus_ten(a)":990,"something.":991,"Pay":992,"following.":993,"define":994,"parameter.":995,"plus_ten()":996,"“a”":997,"Later,":998,"call":999,"correct":1000,"argument,":1001,"So":1002,"“call":1003,"argument":1004,"5”.":1005,"y;":1006,"says":1007,"“after":1008,"operations":1009,"f,":1010,"me":1011,"“Return”":1012,"plays":1013,"connection":1014,"third":1015,"process.":1016,"words,":1017,"input":1018,"variables":1019,"values.":1020,"“return”":1021,"People":1022,"often":1023,"confuse":1024,"return,":1025,"situations":1026,"them.":1027,"6.3":1028,"vs.":1029,"print()":1030,"takes":1031,"better,":1032,"object,":1033,"provides":1034,"printed":1035,"representation":1036,"cell.":1037,"visible":1038,"programmer.":1039,"Otherwise,":1040,"affect":1041,"output.":1042,"Differently,":1043,"visualize":1044,"specifies":1045,"what":1046,"supposed":1047,"back.":1048,"It’s":1049,"keywords":1050,"does.":1051,"great":1052,"functions.":1053,"6.4":1054,"Using":1055,"Another":1056,"isn’t":1057,"secret":1058,"with_bonus(w_hours),":1059,"wage":1060,"hours":1061,"obtained":1062,"run,":1063,"50.":1064,"6.5":1065,"Containing":1066,"Few":1067,"Arguments":1068,"parameter":1069,"done":1070,"enlisting":1071,"arguments":1072,"separated":1073,"comma.":1074,"for,":1075,"say,":1076,"Just":1077,"careful":1078,"a,":1079,"b,":1080,"c.":1081,"won’t":1082,"matter":1083,"names":1084,"6.6":1085,"Notable":1086,"Built-In":1087,"install":1088,"installing":1089,"built-in":1090,"time":1091,"already":1092,"type()":1093,"obtains":1094,"int()":1095,"transforms":1096,"float()":1097,"str()":1098,"string":1099,"max()":1100,"highest":1101,"min()":1102,"lowest":1103,"abs()":1104,"Allows":1105,"absolute":1106,"sum()":1107,"Calculates":1108,"sum":1109,"elements":1110,"list":1111,"designated":1112,"round(x,y)":1113,"returns":1114,"(x),":1115,"rounded":1116,"specified":1117,"digits":1118,"(y)":1119,"pow(x,y)":1120,"len()":1121,"object":1122,"7.":1123,"Sequences":1124,"7.1":1125,"Lists":1126,"points":1127,"integers,":1128,"strings.":1129,"Participants":1130,"indexing":1131,"extracted":1132,"[‘Leila’].":1133,"addition,":1134,"element":1135,"counting":1136,"towards":1137,"beginning.":1138,"you’d":1139,"digit":1140,"fall":1141,"trap":1142,"thinking":1143,"enumerating":1144,"again!":1145,"“Cate”,":1146,"-1.":1147,"7.2":1148,"Help":1149,"Yourself":1150,"Methods":1151,"Here":1152,"allows":1153,"ready-made":1154,"methods":1155,"own":1156,"case":1157,"“Participants”":1158,"list,":1159,"dot":1160,"operator.":1161,"operator":1162,"invoke":1163,"method.":1164,"method":1165,"“append”,":1166,"followed":1167,"“Dwayne”":1168,"our":1169,"inverted":1170,"commas":1171,"Alternatively,":1172,".extend()":1173,"time,":1174,"brackets,":1175,"going":1176,"extend":1177,"adding":1178,"precisely":1179,"7.3":1180,"List":1181,"Slicing":1182,"Many":1183,"problems":1184,"solved":1185,"regard":1186,"tiny":1187,"portion":1188,"cases,":1189,"slicing.":1190,"Imagine":1191,"smaller":1192,"contains":1193,"Leila":1194,"Maria.":1195,"Pythonic,":1196,"position.":1197,"elements,":1198,"open":1199,"did":1200,"indexing,":1201,"corresponds":1202,"interest,":1203,"above":1204,"7.4":1205,"Tuples":1206,"another":1207,"sequences,":1208,"differently":1209,"lists,":1210,"immutable.":1211,"cannot":1212,"changed":1213,"modified;":1214,"append":1215,"delete":1216,"elements.":1217,"having":1218,"tuple":1219,"tuple’s":1220,"placed":1221,"default":1222,"enlist":1223,"perceive":1224,"tuple.":1225,"packed":1226,"reason,":1227,"On":1228,"sign,":1229,"right,":1230,"relevant":1231,"term":1232,"activity":1233,"assignment.":1234,"7.5":1235,"Dictionaries":1236,"storing":1237,"data.":1238,"Each":1239,"associated":1240,"key.":1241,"More":1242,"precisely,":1243,"key":1244,"key-value":1245,"pair.":1246,"dictionary":1247,"created,":1248,"accessed":1249,"key,":1250,"instead":1251,"index!":1252,"Similarly,":1253,"following":1254,"way:":1255,"structure":1256,"here":1257,"8.":1258,"Iteration":1259,"8.1":1260,"Loops":1261,"fundamental":1262,"building":1263,"block":1264,"programs.":1265,"ability":1266,"repeatedly.":1267,"“even”":1268,"even":1269,"20.":1270,"“for":1271,"even”,":1272,"colon,":1273,"“even”,":1274,"following:":1275,"element.":1276,"loop":1277,"body":1278,"performed":1279,"list.":1280,"8.2":1281,"While":1282,"Incrementing":1283,"previous":1284,"lesson":1285,"loop,":1286,"loop.":1287,"However,":1288,"slightly":1289,"different.":1290,"Initially,":1291,"zero.":1292,"we’ll":1293,"say:":1294,"20,":1295,"x.":1296,"succeed,":1297,"“while”":1298,"block,":1299,"happen":1300,"printed.":1301,"bind":1302,"terms,":1303,"existing":1304,"during":1305,"incrementing.":1306,"progressively":1307,"added":1308,"increment.":1309,"increment":1310,"offers":1311,"special":1312,"incrementing:":1313,"+=":1314,"8.3":1315,"range()":1316,"randomize":1317,"lists":1318,"range":1319,"stop":1320,"required":1321,"input,":1322,"optional.":1323,"provided,":1324,"replaced":1325,"assumed":1326,"range(10)":1327,"starting":1328,"implied":1329,"indicating":1330,"ending":1331,"tenth":1332,"consecutive":1333,"9.":1334,"cell,":1335,"“range”":1336,"declare":1337,"7,":1338,"accept":1339,"range.":1340,"range,":1341,"chosen":1342,"well.":1343,"range(1,20,2)":1344,"creates":1345,"odd":1346,"included.":1347,"(which":1348,"1),":1349,"stating":1350,"8.4":1351,"Together":1352,"iteration":1353,"body.":1354,"“Odd”":1355,"places":1356,"translate":1357,"leaves":1358,"“if":1359,"“Else”,":1360,"unless":1361,"even,":1362,"odd,":1363,"“Odd”.":1364,"8.5":1365,"All":1366,"Statements,":1367,"Functions,":1368,"items":1369,"whose":1370,"First,":1371,"numbers,":1372,"“numbers”":1373,"speak,":1374,"“departs”":1375,"0.":1376,"total.":1377,"idea":1378,"conditions":1379,"verified,":1380,"total":1381,"why,":1382,"situation,":1383,"appropriate":1384,"rolling":1385,"sum.":1386,"technically,":1387,"consider":1388,"grow":1389,"grow.":1390,"Copyright":1391,"Science":1392,"Ltd.":1393,"Reproduction":1394,"forbidden":1395,"authorized.":1396,"rights":1397,"reserved.":1398,"Learn":1399,"SCIENCE":1400,"anytime,":1401,"anywhere,":1402,"pace.":1403,"found":1404,"resource":1405,"useful,":1406,"check":1407,"e-learning":1408,"program.":1409,"succeed":1410,"science.":1411,"sought-after":1412,"science":1413,"skills":1414,"experts":1415,"field!":1416,"Earn":1417,"verifiable":1418,"certificate":1419,"achievement":1420,"trusted":1421,"employers":1422,"worldwide":1423,"future":1424,"proof":1425,"career.":1426}

const addVocabulary = (input) => {
    const slicedInput = input.split(" ");
    console.log(slicedInput);
    const duplicateElementRemovedArray=slicedInput.filter((elem, idx) => slicedInput.indexOf(elem) === idx);
    console.log(duplicateElementRemovedArray); 
    duplicateElementRemovedArray.forEach(elem => {
        if(!(elem in Object.getOwnPropertyNames(obj))){
            obj[`${elem}`] = Object.values(obj).at(-1) + 1
        }
    });
    console.log(obj);
    // const frequencyArr = slicedInput.map((elem) => ({
    //     word: elem,
    //     frequency: slicedInput.filter((e) => e === elem).length
    // }))
    // frequencyArr.filter((elem, idx) => frequencyArr.)
    //[word: "how": "44", "hii":2]
} 

addVocabulary('Python is one of the most widely used programming languages among data scientists. This course will show you the technical advantages it has over other programming languages. You will start working with its modules for scientific computing, and you will begin to understand why these functionalities make Python the preferred choice in finance, econometrics, economics, data science, and machine learning. You will learn about Python’s technical advantages, specific features, modules, functionalities, and more: • Basic Python Syntax • Create and Use functions • Work with variables, operators, and conditional statements • Study Python sequences and iterations • Import modules in Python Keywords: Python, conditional statements, import modules, python syntax, strings, for loops, while loops 365 DATA SCENCE 5 1. Introduction to Programming The computer understands 1s and 0s only. To communicate a real-life problem to the computer, you need to create a specific type of text, called a source code or a human readable code, that software can read and then process to the computer in 1s and 0s. Term Definition Program a sequence of instructions that designate how to execute a computation Programming taking a task and writing it down in a programming language that the computer can understand and execute 2. Why Python? Python is an open-source, general-purpose high-level programming language. Term Definition Open-source software (OSS) Open-source means it is free. Python has a large and active scientific community with access to the software’s source code and contributes to its continuous development and upgrading, depending on users’ needs General-purpose There is a broad set of fields where Python could be applied – web programming, analysis of financial data, analysis of big data, and more. High-level High-level languages employ syntax a lot closer to human logic, which makes the language easier to learn and implement. Python’s popularity lies on two main pillars. One is that it is an easy-to-learn programming language designed to be highly readable, with a syntax quite clear and intuitive. And the second reason is its user-friendliness does not take away from its strength. Python can execute a variety of complex computations and is one of the most powerful programming languages preferred by specialists. 365 DATA SCENCE 6 3. Python Variables and Data Types 3.1 Variables One of the main concepts in programming is variables. They are your best friends. You will deal with them all the time. You will use them to store information. They will represent your data input. Let’s say you want to have a variable x that is equal to the value of 5 and then ask the computer to tell you the value of that variable. Type x equals 5. Write x and then execute. And here’s the result – 5. An alternative way to execute the instruction that will provide the value we assigned to y would be to use the print command. If we say “print(y)”, the machine will simply execute this command and provide the value of y as a statement. 365 DATA SCENCE 7 3.2 Numbers and Boolean Values When programming, not only in Python, if you say that a variable has a numeric value, you are being ambiguous. The reason is that numbers can be integers or floating points, also called floats, for instance. Term Definition Integer Positive or negative whole numbers without a decimal point Example: 5, 10, -3, -15 Floating point (float) Real numbers. Hence, they have a decimal point Example: 4.75, -5.50, 11.0 Boolean value a True or False value, corresponding to the machine’s logic of understanding 1s and 0s, on or off, right or wrong, true or false. Example: True, False 365 DATA SCENCE 8 3.3 Strings Strings are text values composed of a sequence of characters. Type single or double quotation marks around the name George. Python displays ‘George’ if you don’t use the print command. Should you use print, the output will be shown with no quotes – you’ll be able to see plain text. Strings are text values composed of a sequence of characters. To type “I’m fine” you’ll need the apostrophe in the English syntax, not for the Pythonic one. In such situations, you can distinguish between the two symbols – put the text within double quotes and leave the apostrophe, which technically coincides with the single quote between I and M. An alternative way to do that would be to leave the quotes on the sides and place a back slash before the apostrophe within the phrase. This backslash is called an escape character, as it changes the interpretation of characters immediately after it. To state “press “Enter””, the outer symbols must differ from the inner ones. Put single quotes on the sides. 365 DATA SCENCE 9 Strings are text values composed of a sequence of characters. Say you wish to print “Red car” on the same line. “Add” one of the strings to the other by typing in a plus sign between the two. Put a blank space before the second apostrophe of the first word. (In [17]) Type “print ‘Red’”, and then put a comma, which is called a trailing comma, and Python will print the next word, ‘car’, on the same line, separating the two words with a blank space. (In [18]) 365 DATA SCENCE 10 4. Basic Python Syntax 4.1 Arithmetic Operators In the equation you see here, 1 and 2 are called operands, The plus and minus signs are called operators, and given they also represent arithmetic operations, they can be called arithmetic operators. Operator Description + Addition - Subtraction / Division Note: If you want to divide 16 by 3, when you use Python 2, you should look for the quotient of the float 16 divided by 3 and not of the integer 16 divided by 3. So, you should either transform the number into a float or type it as a float directly. % Returns remainder * Multiplication ** Performs power calculation 365 DATA SCENCE 11 4.2 The Double Equality Sign The equals sign when programming means “assign” or “bind to”. For instance, “assign 5 to the power of 3 to the variable y”; “bind 5 to the power of 3 to y”. From that moment for the computer, y will be equal to 125. When you mean equality between values and not assignment of values in Python, you’ll need the double equality sign. Anytime you use it, you will obtain one of the two possible outcomes – “True” or “False”. 4.3 Reassign Values If you assign the value of 1 to a variable z, your output after executing z will be 1. After that, if you assign 3 to the same variable z, z will be equal to 3, not 1 anymore. Python reassigns values to its objects. Therefore, remember the last command is valid, and older commands are overwritten. 365 DATA SCENCE 12 4.4 Add Comments Comments are sentences not executed by the computer; it doesn’t read them as instructions. The trick is to put a hash sign at the beginning of each line you would like to insert as a comment. If you would like to leave a comment on two lines, don’t forget to place the hash sign at the beginning of each line. 4.5 Line Continuation You might prefer to send part of the code to the next line. So, 2.0 times 1.5 plus 5 could be written in two lines, and the machine could still read it as one command. This could be achieved by putting a back slash where you would like the end of the first line to be. It indicates you will continue the same command on a new line. 365 DATA SCENCE 13 4.6 Indexing Elements Is it possible to extract the letter “d”? Yes, you can do that by using square brackets. And within them, you should specify the position of the letter we would like to be extracted. Note: Make sure you don’t mistake brackets for parentheses or braces: parentheses – () brackets – [] braces– {} ! A very important thing you should remember is that, in Python, we count from 0, not from 1! 0, 1, 2, 3, 4, and so on. That’s why I’ll ask for the 4th letter, ‘d’, by writing 3 here. 365 DATA SCENCE 14 4.7 Structure Your Code with Indentation The way you apply indentation in practice is important, as this will be the only way to communicate your ideas to the machine properly. Def and Print form two separate and, written in this way, clearly distinguishable blocks of code or blocks of commands. Everything that regards the function is written with one indentation to the inside. Once you decide to code something else, start on a new line with no indentation. The blocks of code are more visible, and this clarifies the logic you are applying to solve your problem. 4.8 Comparison Operators Operator Description == Verifies the left and right side of an equality are equal != Verifies the left and right side of an equality are not equal > Greater than < Less than >= Greater than or equal to <= Less than or equal to 365 DATA SCENCE 15 4.9 Logical Operators Briefly, the logical operators in Python are the words “NOT”, “AND”, and “OR”. They compare a certain amount of statements and return Boolean values – “True” or “False” – hence their second name, Boolean operators. Operator Description not Leads to the opposite of the given statement Example: “not True” leads to False and Checks whether the two statements around it are “True” Example: “True and False” leads to False or Checks whether at least one of the two statements is “True” Example: “False or True” leads to True You must respect the order of importance of these three operators. It is: “not” comes first, then we have “and”, and finally “or”. 4.10 Identity Operators The identity operators are the words “is” and “is not”. They function similar to the double equality sign and the exclamation mark and equality sign we saw earlier. 365 DATA SCENCE 16 5. Conditional Statements 5.1 Introduction to the IF statement A prominent example of conditional statements in Python is the “IF” statement. What you can use it for is intuitive, but it is very important to learn the syntax. The graph could help you imagine the process of the conditionals. Before it displays the outcome of the operation, the machine follows these logical steps. If the conditional code is not to be executed because the if-condition is not true, the program will directly lead you to some other output or, as it is in this case, to nothing. After any of the two situations, the machine will go to the next black point and will progress from there on. 365 DATA SCENCE 17 5.2 Add an ELSE statement “ELSE” will tell the computer to execute the successive command in all other cases. Instead of leading to no output, if the condition is false, we will get to an else code. Regardless whether the initial condition is satisfied, we will get to the end point, so the computer has concluded the entire operation and is ready to execute a new one. 365 DATA SCENCE 18 5.3 Else if, for Brief - ELIF If y is not greater than 5, the computer will think: “else if y is less than 5”, written “elif y is less than 5”, then I will print out “Less”. Know that you can add as many elif statements as you need. A very important detail you should try to remember is the computer always reads your commands from top to bottom. Regardless of the speed at which it works, it executes only one command at a time. Scientifically speaking, the instructions we give to the machine are part of a control flow. This is something like the flow of the logical thought of the computer, the way the computer thinks – step by step, executing the steps in a rigid order. When it works with a conditional statement, the computer’s task will be to execute a specific command once a certain condition has been satisfied. It will read your commands from the if- statement at the top, through the elif-statements in the middle, to the else- statement at the end. The first moment the machine finds a satisfied condition, it will print the respective output and will execute no other part of the code from this conditional. 365 DATA SCENCE 19 5.4 A Note on Boolean Values From a certain perspective, everything in a computer system is Boolean, comprising sequences of 0s and 1s, “False” and “True”. This is why we are paying attention to the Boolean value. It helps us understand general computational logic and the way conditionals work in Python. Basically, after you insert your if-statement, the computer will attach a Boolean value to it. Depending on the value of its outcome, “True” or “False”, it will produce one of the suggested outputs, “Correct” or “Incorrect”. 365 DATA SCENCE 20 6. Functions 6.1 Defining a Function in Python Python’s functions are an invaluable tool for programmers. To tell the computer you are about to create a function, just write def at the beginning of the line. Def is neither a command nor a function. It is a keyword. To indicate this, Jupyter will automatically change its font color to green. Then, you can type the name of the function you will use. Then you can add a pair of parentheses. Technically, within these parentheses, you could place the parameters of the function if it requires you to have any. It is no problem to have a function with zero parameters. To proceed, don’t miss to put a colon after the name of the function. Since it is inconvenient to continue on the same line when the function becomes longer, it is much better to build the habit of laying the instructions on a new line, with an indent again. Good legibility counts for a good style of coding! 365 DATA SCENCE 21 6.2 Creating a Function with a Parameter Don’t forget to return a value from the function. We will need plus_ten(a) to do a specific calculation for us and not just print something. Pay attention to the following. When we define a function, we specify in parentheses a parameter. In the plus_ten() function, “a” is a parameter. Later, when we call this function, it is correct to say we provide an argument, not a parameter. So we can say “call plus_ten() with an argument of 2, call plus_ten() with an argument of 5”. In programming, return regards the value of y; it just says to the machine “after the operations executed by the function f, return to me the value of y”. “Return” plays a connection between the second and the third step of the process. In other words, a function can take an input of one or more variables and return a single output composed of one or more values. This is why “return” can be used only once in a function. People often confuse print and return, and the type of situations when we can apply them. 365 DATA SCENCE 22 6.3 print vs. return print() takes a statement or, better, an object, and provides its printed representation in the output cell. It just makes a certain statement visible to the programmer. Otherwise, print does not affect the calculation of the output. Differently, return does not visualize the output. It specifies what a certain function is supposed to give back. It’s important you understand what each of the two keywords does. This will help you a great deal when working with functions. 6.4 Using a Function in Another Function It isn’t a secret we can have a function within the function. In with_bonus(w_hours), you can return directly the wage with working hours as an output, which would be the value obtained after the wage function has been run, plus 50. 365 DATA SCENCE 23 6.5 Creating Functions Containing a Few Arguments You can work with more than one parameter in a function. The way this is done in Python is by enlisting all the arguments within the parentheses, separated by a comma. You can call the function for, say, 10, 3, and 2. You will get 4. Just be careful with the order in which you state the values. In this case, we assigned 10 to the variable a, 3 to b, and 2 to c. Otherwise, the order won’t matter if and only if you specify the names of the variables within the parentheses. 365 DATA SCENCE 24 6.6 Notable Built-In Functions in Python When you install Python on your computer, you are also installing some of its built-in functions. This means you won’t need to type their code every time you use them – these functions are already on your computer and can be applied directly. Function Description type() obtains the type of variable you use as an argument int() transforms its argument in an integer data type float() transforms its argument in a float data type str() transforms its argument in a string data type max() Returns the highest value from a sequence of numbers min() Returns the lowest value from a sequence of numbers abs() Allows you to obtain the absolute value of its argument sum() Calculates the sum of all the elements in a list designated as an argument round(x,y) returns the float of its argument (x), rounded to a specified number of digits (y) after the decimal point pow(x,y) returns x to the power of y len() returns the number of elements in an object 365 DATA SCENCE 25 7. Sequences 7.1 Lists A list is a type of sequence of data points such as floats, integers, or strings. You can access the Participants list by indexing the value 1. This means you have extracted the second of the elements in this list variable [‘Leila’]. In addition, there is a way to get to the last element from your list – start counting from the end towards the beginning. Then, you’d need the minus sign before the digit and don’t fall in the trap of thinking we begin enumerating from 0 again! To obtain “Cate”, you have to write -1. 365 DATA SCENCE 26 7.2 Help Yourself with Methods Here is the syntax that allows you to call ready-made built-in methods that you do not have to create on your own and can be used in Python directly. After the name of the object, which in this case is the “Participants” list, you must put a dot called a dot operator. The dot operator allows you to call on or invoke a certain method. To call the method “append”, state its name, followed by parentheses. To insert the name “Dwayne” in our list, you must put the string “Dwayne” in inverted commas between the parentheses. Alternatively, the same result can be achieved by using the .extend() method. This time, within the parentheses, you’ll have to add brackets, as you are going to extend the Participants list by adding a list specified precisely in these parentheses. 365 DATA SCENCE 27 7.3 List Slicing Many of the problems that must be solved will regard a tiny portion of the data, and in such cases, you can apply slicing. Imagine you want to use the “Participants” list to obtain a second much smaller list that contains only two names - Leila and Maria. In Pythonic, that would mean to extract the elements from the first and second position. To access these elements, we will open square brackets, just as we did with indexing, and write 1 colon 3. The first number corresponds precisely to the first position of interest, while the second number is one position above the last position we need. 365 DATA SCENCE 28 7.4 Tuples Tuples are another type of data sequences, but differently to lists, they are immutable. Tuples cannot be changed or modified; you cannot append or delete elements. The syntax that indicates you are having a tuple and not a list is that the tuple’s elements are placed within parentheses and not brackets. The tuple is the default sequence type in Python, so if you enlist three values here, the computer will perceive the new variable as a tuple. We could also say the three values will be packed into a tuple. For the same reason, you can assign a number of values to the same number of variables. On the left side of the equality sign, add a tuple of variables, and on the right, a tuple of values. That’s why the relevant technical term for this activity is tuple assignment. 365 DATA SCENCE 29 7.5 Dictionaries Dictionaries represent another way of storing data. Each value is associated with a certain key. More precisely, a key and its respective value form a key-value pair. After a certain dictionary has been created, a value can be accessed by its key, instead of its index! Similarly, as we could do with lists, we can add a new value to the dictionary in the following way: the structure to apply here is dictionary name, new key name within brackets, equality sign, and the name of the new value. 365 DATA SCENCE 30 8. Iteration 8.1 For Loops Iteration is a fundamental building block of all programs. It is the ability to execute a certain code repeatedly. The list “even” contains all the even numbers from 0 to 20. “for n in even”, colon, which would mean for every element n in the list “even”, do the following: print that element. The command in the loop body is performed once for each element in the even list. 365 DATA SCENCE 31 8.2 While Loops and Incrementing The same output we obtained in the previous lesson could be achieved after using a while loop, instead of a for loop. However, the structure we will use will be slightly different. Initially, we will set a variable x equal to zero. And we’ll say: while this value is smaller than or equal to 20, print x. We want to get the loop to end. What is supposed to succeed, the loop body in the “while” block, is a line of code that specifies a change in x or what has to happen to x after it is printed. In our case, we will tell the computer to bind x to a value equal to x + 2. In programming terms, adding the same number on top of an existing variable during a loop is called incrementing. The amount being progressively added is called an increment. In our case, we have an increment of 2. The Pythonic syntax offers a special way to indicate incrementing: x += 2 365 DATA SCENCE 32 8.3 Create Lists with the range() Function When you need to randomize data points and lists with data points, you can use Python’s built-in range function. The syntax of the function is the following: The stop value is a required input, while the start and step values are optional. If not provided, the start value will be automatically replaced with a 0, and the step value would be assumed to be equal to 1. range(10) will provide a list of 10 elements, starting from 0, implied after not indicating a start value, and ending at the tenth consecutive number – 9. In another cell, if in the “range” function we declare as arguments 3 and 7, for instance, Python will accept 3 as a start value, and 7 as a stop value of the range. So, we’ll have 4 elements – 3, 4, 5, and 6. To specify a step value in a range, the other two arguments must be chosen as well. range(1,20,2) creates a list with all the odd numbers from 1 to 19 included. It will start with the number 1, and the list will end with number 19 (which equals the stop value 20 minus 1), stating only the odd numbers. 365 DATA SCENCE 33 8.4 Use Conditional Statements and Loops Together You create an iteration that includes a conditional in the loop body. You can tell the computer to print all the even values between 0 and 19 and state “Odd” in the places where we have odd numbers. Let’s translate this into computational steps. If x leaves a remainder of 0 when divided by 2, which is the same as to say “if x is even”, then print x on the same line. “Else”, which means unless x is even, or if x is odd, print “Odd”. 8.5 All In – Conditional Statements, Functions, and Loops We use iterations when we have to go through variables that are part of a list. You can count the number of items whose value is less than 20 in a list. First, define a function that takes as an argument numbers, where “numbers” will be a certain list variable. The trick is to create a variable that, so to speak, “departs” from 0. Let’s call it total. The idea is that, when certain conditions are verified, total will change its value. This is why, in such a situation, it is appropriate to call this variable a rolling sum. More technically, when we consider x in the numbers list, if it is smaller than 20, we will increment the total by 1 and finally return the total value. This means that, if x is less than 20, total will grow by 1, and if x is greater than or equal to 20, total will not grow. So, for a given list, this count function will return the amount of numbers smaller than 20. Copyright 2022 365 Data Science Ltd. Reproduction is forbidden unless authorized. All rights reserved. 365 DATA SCENCE Learn DATA SCIENCE anytime, anywhere, at your own pace. If you found this resource useful, check out our e-learning program. We have everything you need to succeed in data science. Learn the most sought-after data science skills from the best experts in the field! Earn a verifiable certificate of achievement trusted by employers worldwide and future proof your career.');

// console.log(JSON.stringify(obj));

